AWSTemplateFormatVersion: '2010-09-09'
Description: The AWS CloudFormation template for this Serverless application
Resources:
  ModerateImageLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: /aws/lambda/moderate-img-poc-moderateImage
      RetentionInDays: 1
  IamRoleLambdaExecution:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName:
            'Fn::Join':
              - '-'
              - - moderate-img
                - poc
                - lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                Resource:
                  - 'Fn::Sub': >-
                      arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/moderate-img-poc*:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - 'Fn::Sub': >-
                      arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/moderate-img-poc*:*:*
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource:
                  - 'Fn::Sub': '${SrcQueue.Arn}'
      Path: /
      RoleName:
        'Fn::Join':
          - '-'
          - - moderate-img
            - poc
            - Ref: 'AWS::Region'
            - lambdaRole
  ModerateImageLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket:
          'Fn::Sub': '${LambdaFunctionsBucket}'
        S3Key:
          'Fn::Sub': '${ModerateImageLambdaFunctionKey}'
      FunctionName: moderate-img-poc-moderateImage
      Handler: .bin/moderateImage
      MemorySize: 768
      Role:
        'Fn::GetAtt':
          - ModerateImageIamRoleLambdaExecution
          - Arn
      Runtime:
        'Fn::Sub': '${LambdaFunctionsRuntime}'
      Timeout: 10
      Environment:
        Variables:
          MinConfidenceParamName:
            'Fn::Sub': '/moderate-img/${Stage}/MinConfidence'
          SrcBucketName:
            'Fn::Sub': 'moderate-img-${Stage}'
          AlertTopicArn:
            'Fn::Sub': >-
              arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${AlertTopic}
    DependsOn:
      - ModerateImageIamRoleLambdaExecution
      - ModerateImageLogGroup
  ModerateImageLambdaVersionWYHUXSsE2CiRm18A79qbL1cZhoa4WWxlaeaBchjHQ90:
    Type: 'AWS::Lambda::Version'
    DeletionPolicy: Retain
    Properties:
      FunctionName:
        Ref: ModerateImageLambdaFunction
      CodeSha256: 2c3n+vHuTd0KZ2Tq8DzdR43NfHCpdN65+omH/GB8MZI=
  ModerateImageEventSourceMappingSQSSrcQueueArn:
    Type: 'AWS::Lambda::EventSourceMapping'
    DependsOn: ModerateImageIamRoleLambdaExecution
    Properties:
      BatchSize: 10
      EventSourceArn:
        'Fn::Sub': '${SrcQueue.Arn}'
      FunctionName:
        'Fn::GetAtt':
          - ModerateImageLambdaFunction
          - Arn
      Enabled: true
  ModerateImageIamRoleLambdaExecution:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName:
            'Fn::Join':
              - '-'
              - - moderate-img
                - poc
                - lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'Fn::Sub': >-
                      arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/moderate-img-poc-moderateImage:*:*
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource:
                  - 'Fn::Sub': '${SrcQueue.Arn}'
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                Resource:
                  'Fn::Sub': >-
                    arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/moderate-img/${Stage}/MinConfidence
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  'Fn::Sub': '${SrcBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'rekognition:DetectModerationLabels'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  'Fn::Sub': >-
                    arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${AlertTopic}
      Path: /
      RoleName:
        'Fn::Join':
          - '-'
          - - moderate-img
            - poc
            - moderateImage
            - Ref: 'AWS::Region'
            - lambdaRole
      ManagedPolicyArns: []
  MinConfidenceParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name:
        'Fn::Sub': '/moderate-img/${Stage}/MinConfidence'
      Type: String
      Value: '80'
  SrcBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName:
        'Fn::Sub': 'moderate-img-${Stage}'
      NotificationConfiguration:
        QueueConfigurations:
          - Event: 's3:ObjectCreated:*'
            Queue:
              'Fn::Sub': '${SrcQueue.Arn}'
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 2
            Status: Enabled
  SrcBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        'Fn::Sub': 'moderate-img-${Stage}'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Principal:
              Service: rekognition.amazonaws.com
            Resource:
              'Fn::Sub': '${SrcBucket.Arn}/*'
  SrcQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName:
        'Fn::Sub': 'moderate-img-${Stage}-src'
      MessageRetentionPeriod: 172800
      RedrivePolicy:
        deadLetterTargetArn:
          'Fn::Sub': '${DLQueue.Arn}'
        maxReceiveCount: 720
  SrcQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      Queues:
        - 'Fn::Sub': '${SrcQueue}'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Principal:
              Service: s3.amazonaws.com
            Resource:
              'Fn::Sub': '${SrcQueue.Arn}'
            Condition:
              ArnLike:
                'aws:SourceArn':
                  'Fn::Sub': 'arn:${AWS::Partition}:s3:::moderate-img-${Stage}'
  DLQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName:
        'Fn::Sub': 'moderate-img-${Stage}-dl'
      MessageRetentionPeriod: 129600
Outputs:
  ModerateImageLambdaFunctionQualifiedArn:
    Description: Current Lambda function version
    Value:
      Ref: ModerateImageLambdaVersionWYHUXSsE2CiRm18A79qbL1cZhoa4WWxlaeaBchjHQ90
Parameters:
  Stage:
    Type: String
    Default: poc
    Description: 'the stage for deployment (poc, dev, prod, etc)'
  AlertTopic:
    Type: String
    Default: moderate-poc
    Description: the topic name to which this service will publish moderation alerts
  LambdaFunctionsRuntime:
    Type: String
    AllowedValues:
      - nodejs12.x
      - python3.8
      - ruby2.7
      - java11
      - go1.x
      - dotnetcore3.1
    Description: the runtime of your lambda function packages
  LambdaFunctionsBucket:
    Type: String
    Description: the name of the bucket containing your lambda function packages
  ModerateImageLambdaFunctionKey:
    Type: String
    Description: the key identifying your ModerateImage lambda function package
